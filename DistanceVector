#!/usr/bin/env python3

from typing import Dict, Tuple, List
import copy

def debug(msg):
    print(msg)
    return

class Router:
    def __init__(self, name: str):
        self.name = name
        self.neighbours:Dict[str, int] = {}  # {router_name: cost}
        self.distance_vector:Dict[str, Dict[str, int]] = {}  # {router_name: {next_hop: cost}}
        self.neighbours_dv:List[Tuple[str, Dict[str, Dict[str, int]]]] = [] # tuples of (router_name, dv)

    def add_neighbour(self, name: str, cost: int):
        if cost != -1:
            self.neighbours[name] = cost
        else:
            del self.neighbours[name]   # Remove neighbour if cost is -1
        return

    def send_distance_vector(self, routers: Dict[str, 'Router']):
        # send the distance vector to all neighbours
        dv = copy.deepcopy(self.distance_vector)
        for neighbour_name, _ in self.neighbours.items():
            assert neighbour_name in routers, f"Router {self.name} tried to send DV to non-existent router {neighbour_name}"
            neighbour = routers[neighbour_name]
            neighbour.recv_distance_vector(self.name, dv)
        return
    
    def recv_distance_vector(self, sender:str, dv: Dict[str, Dict[str, int]]):
        # Process the received distance vector from a neighbour
        assert sender in self.neighbours, f"Received DV from non-neighbour {sender}"
        self.neighbours_dv.append((sender, dv))
        return
    
    
    
    def update_distance_vector(self) -> bool:
        # Update the distance vector based on received DVs
        # Return True if the distance vector updated
        dv_before_update = copy.deepcopy(self.distance_vector)
        self.distance_vector = {}
        
        # Initialize the distance vector with direct neighbours
        for neighbour, cost in self.neighbours.items():
            self.distance_vector[neighbour] = {neighbour: cost}
        
        # debug(f"Router {self.name} updating distance vector with neighbours: {self.neighbours}")
        # debug(f"Router {self.name} received distance vectors: {self.neighbours_dv}")
        # debug('')
        
        for neighbour, neighbour_dv in self.neighbours_dv:
            for dest, neighbour_next_hops in neighbour_dv.items():
                if dest == self.name:
                    continue
                # If the destination is not in the distance vector, initialize it
                if dest not in self.distance_vector:
                    self.distance_vector[dest] = {}
                
                # Update the distance vector for the destination
                for _, cost in neighbour_next_hops.items():
                    new_cost = self.neighbours[neighbour] + cost
                    # update if not already present or if the new cost is lower
                    if neighbour not in self.distance_vector[dest] or \
                        new_cost < self.distance_vector[dest][neighbour]:
                        self.distance_vector[dest][neighbour] = new_cost
        
        # check if the distance vector has changed
        return dv_before_update != self.distance_vector

    def print_distance_vector(self, routers: Dict[str, 'Router'], t: int):
        print(f"Distance Table of router {self.name} at t={t}:")
        routers_list = sorted(routers.keys())
        routers_list.remove(self.name)
        
        # print table header
        print('', *routers_list, sep='    ')
        for dest in routers_list:
            # Get the next hop and cost to the destination
            cost_list = [self.__get_dv(dest, next_hop) for next_hop in routers_list]
            print(dest, *cost_list, sep='    ')
        print()
        return
        
        
    def __get_dv(self, dest:str, next_hop:str) -> int:
        # Get the cost to the destination via the next hop
        if dest in self.distance_vector and next_hop in self.distance_vector[dest]:
            return self.distance_vector[dest][next_hop]
        return 'INF'
    
    def print_route_table(self, routers: Dict[str, 'Router']):
        print(f'Routing Table of router {self.name}:')
        routers_list = sorted(routers.keys())
        routers_list.remove(self.name)
        for dest in routers_list:
            if dest in self.distance_vector and len(self.distance_vector[dest]) > 0:
                next_hops = self.distance_vector[dest]
                # Get the next hop with the minimum cost
                next_hop, cost = min(next_hops.items(), key=lambda x: (x[1], x[0]) )
                print(f'{dest},{next_hop},{cost}')
            else:
                print(f'{dest},INF,INF')
        print()
        return

class Network:
    def __init__(self):
        self.routers:Dict[str, Router] = {}
        self.t = 0 

    def add_router(self, name: str):
        self.routers[name] = Router(name)
        return

    def add_link(self, a: str, b: str, cost: int):
        if a not in self.routers:
            self.add_router(a)
        if b not in self.routers:
            self.add_router(b)
        Ra: Router = self.routers[a]
        Rb: Router = self.routers[b]
        Ra.add_neighbour(b, cost)
        Rb.add_neighbour(a, cost)
        return

    def run_dv_algorithm(self):
        while True:
            router_update = []
            # Clear the neighbours' distance vectors
            for router in self.routers.values():
                router.neighbours_dv.clear()
            
            # Send distance vectors to neighbours
            for router in self.routers.values():
                router.send_distance_vector(self.routers)
            
            # Update distance vectors
            for router in self.routers.values():
                r = router.update_distance_vector()
                router_update.append(r)
            
            # If no router updated its distance vector, stop
            if not any(router_update):
                break
            
            # Print distance vectors and route tables
            for router in self.routers.values():
                router.print_distance_vector(self.routers, self.t)
            
            self.t += 1
            
        for router in self.routers.values():
            router.print_route_table(self.routers)

def main():
    network = Network()
    while True:
        line = input().strip()
        
        if line == 'START':
            pass
        elif line == 'UPDATE':
            network.run_dv_algorithm()
        elif line == 'END':
            network.run_dv_algorithm()
            exit(0)
        elif line.count(' ') == 2:
            a, b, cost = line.split(' ')
            network.add_link(a, b, int(cost))
        else:
            network.add_router(line)
    return


if __name__ == '__main__':
    main()
